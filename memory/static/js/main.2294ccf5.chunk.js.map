{"version":3,"sources":["components/board/Icons.tsx","components/board/BoardTile.tsx","components/board/Board.tsx","components/stats/Timer.tsx","components/stats/MoveCounter.tsx","components/stats/Stats.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["allIcons","BeachAccessIcon","HomeIcon","AdbIcon","AirplanemodeActiveIcon","AllInclusiveIcon","AppleIcon","AutoFixHighIcon","BedtimeIcon","BrightnessHighIcon","CakeIcon","CameraIcon","DirectionsBikeIcon","DirectionsBoatIcon","EmojiEmotionsIcon","GitHubIcon","GppGoodIcon","GrassIcon","HouseboatIcon","InstagramIcon","IceSkatingIcon","IcecreamIcon","LocalOfferIcon","LocalPhoneIcon","LoopIcon","MouseIcon","OutdoorGrillIcon","OfflineBoltIcon","PetsIcon","PestControlRodentIcon","PestControlIcon","PrecisionManufacturingIcon","PlumbingIcon","getIcons","difficulty","numIcons","availableIcons","concat","icons","length","index","Math","floor","random","push","splice","map","value","sort","a","b","BoardTile","props","Card","className","flipped","onClick","e","clickHandler","i","icon","Board","easy","medium","hard","tileClicked","tileIndex","console","log","setState","prev","lastClicked","tilePropsDict","matched","Object","values","forEach","p","second","handleWinCondition","incrementMoveCount","state","fromEntries","every","tp","alert","classes","entries","this","find","val","React","Component","Timer","timerId","startTime","Date","setHours","setMinutes","setSeconds","currTime","setInterval","tick","clearInterval","valueOf","t","format","minimumIntegerDigits","hours","getHours","toLocaleString","minutes","getMinutes","seconds","getSeconds","getFormattedTime","MoveCounter","move","Stats","containerStyle","display","flexDirection","justifyContent","border","borderRadius","borderColor","bgcolor","grey","Container","maxWidth","sx","moveCount","App","darkTheme","createTheme","palette","mode","gridBoardItem","useState","setMoveCount","StyledEngineProvider","injectFirst","ThemeProvider","theme","CssBaseline","padding","Grid","container","gap","item","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2294ccf5.chunk.js","sourcesContent":["import BeachAccessIcon from '@mui/icons-material/BeachAccess';\nimport HomeIcon from '@mui/icons-material/Home';\nimport AdbIcon from '@mui/icons-material/Adb';\nimport AirplanemodeActiveIcon from '@mui/icons-material/AirplanemodeActive';\nimport AllInclusiveIcon from '@mui/icons-material/AllInclusive';\nimport AppleIcon from '@mui/icons-material/Apple';\nimport AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';\nimport BedtimeIcon from '@mui/icons-material/Bedtime';\nimport BrightnessHighIcon from '@mui/icons-material/BrightnessHigh';\nimport CakeIcon from '@mui/icons-material/Cake';\nimport CameraIcon from '@mui/icons-material/Camera';\nimport DirectionsBikeIcon from '@mui/icons-material/DirectionsBike';\nimport DirectionsBoatIcon from '@mui/icons-material/DirectionsBoat';\nimport EmojiEmotionsIcon from '@mui/icons-material/EmojiEmotions';\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport GppGoodIcon from '@mui/icons-material/GppGood';\nimport GrassIcon from '@mui/icons-material/Grass';\nimport HouseboatIcon from '@mui/icons-material/Houseboat';\nimport InstagramIcon from '@mui/icons-material/Instagram';\nimport IceSkatingIcon from '@mui/icons-material/IceSkating';\nimport IcecreamIcon from '@mui/icons-material/Icecream';\nimport LocalOfferIcon from '@mui/icons-material/LocalOffer';\nimport LocalPhoneIcon from '@mui/icons-material/LocalPhone';\nimport LoopIcon from '@mui/icons-material/Loop';\nimport MouseIcon from '@mui/icons-material/Mouse';\nimport OutdoorGrillIcon from '@mui/icons-material/OutdoorGrill';\nimport OfflineBoltIcon from '@mui/icons-material/OfflineBolt';\nimport PetsIcon from '@mui/icons-material/Pets';\nimport PestControlRodentIcon from '@mui/icons-material/PestControlRodent';\nimport PestControlIcon from '@mui/icons-material/PestControl';\nimport PrecisionManufacturingIcon from '@mui/icons-material/PrecisionManufacturing';\nimport PlumbingIcon from '@mui/icons-material/Plumbing';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport { SvgIconTypeMap } from '@mui/material';\n\nconst allIcons = [\n    BeachAccessIcon, HomeIcon, AdbIcon, AirplanemodeActiveIcon, AllInclusiveIcon,\n    AppleIcon, AutoFixHighIcon, BedtimeIcon, BrightnessHighIcon, CakeIcon,\n    CameraIcon, DirectionsBikeIcon, DirectionsBoatIcon, EmojiEmotionsIcon,\n    GitHubIcon, GppGoodIcon, GrassIcon, HouseboatIcon, InstagramIcon,\n    IceSkatingIcon, IcecreamIcon, LocalOfferIcon, LocalPhoneIcon, LoopIcon,\n    MouseIcon, OutdoorGrillIcon, OfflineBoltIcon, PetsIcon, PestControlRodentIcon,\n    PestControlIcon, PrecisionManufacturingIcon, PlumbingIcon\n];\n\ntype Icon = (OverridableComponent<SvgIconTypeMap<{}, \"svg\">> & { muiName: string; });\nexport function getIcons(difficulty: number): Icon[] {\n    const numIcons = difficulty / 2;\n    const availableIcons: Icon[] = [].concat(allIcons as any);\n\n    // get random set of icons\n    let icons = [];\n    while (icons.length < numIcons) {\n        const index = Math.floor(Math.random() * (availableIcons.length - 1));\n        icons.push(availableIcons.splice(index, 1)[0]);\n    }\n\n    // double (need to have a match)\n    icons = icons.concat(icons);\n\n    // shuffle\n    return icons\n        .map((value) => ({ value, sort: Math.random() }))\n        .sort((a, b) => a.sort - b.sort)\n        .map(({ value }) => value);\n}","import { Card } from \"@mui/material\";\nimport './BoardTile.css';\n\nexport interface BoardTileProps {\n    i: number;\n    flipped: boolean;\n    matched: boolean;\n    icon: any;\n    clickHandler: any;\n}\n\nconst BoardTile = (props: BoardTileProps) => {\n    return (\n        <Card\n            className={`boardTile ${props.flipped ? 'cardBack' : 'cardFront'}`}\n            onClick={(e) => props.clickHandler(props.i, e)}\n        >\n            {props.flipped && <props.icon className='cardIcon'></props.icon>}\n        </Card>\n    )\n}\n\nexport default BoardTile;","import React from 'react';\nimport { getIcons } from './Icons';\nimport BoardTile from './BoardTile';\nimport { BoardTileProps } from './BoardTile';\nimport './Board.css';\n\n\ninterface BoardState {\n    difficulty: number; // current difficulty\n    tilePropsDict: { [key: string]: BoardTileProps }\n    lastClicked: number;\n}\n\ninterface BoardProps {\n  incrementMoveCount: () => void;\n}\nclass Board extends React.Component<BoardProps, BoardState> {\n    difficulty = { easy: 4*4, medium: 6*6, hard: 8*8 };\n\n    constructor(props: BoardProps) {\n        super(props);\n        this.state = {\n            difficulty: this.difficulty.easy,\n            tilePropsDict: Object.fromEntries(getIcons(this.difficulty.easy)\n                .map((icon, i) => ({\n                    icon,\n                    i,\n                    flipped: false,\n                    matched: false,\n                    clickHandler: this.tileClicked\n                }))\n                .map(p => [p.i, p])),\n            lastClicked: -1\n        };\n    }\n\n    handleWinCondition(tilePropsDict: { [key: string]: BoardTileProps }) {\n        if (Object.values(tilePropsDict).every(tp => tp.matched)) {\n            alert('Hooray! You won!\\nRefresh to start over.');\n        }\n    }\n\n    tileClicked = (tileIndex: number) => {\n        console.log(`tile ${tileIndex} clicked!`);\n\n        this.setState(prev => {\n            console.log(prev);\n\n            if (prev.lastClicked === tileIndex || prev.tilePropsDict[tileIndex].matched) {\n                console.log('ignoring click')\n                return prev;\n            }\n\n            let lastClicked = prev.lastClicked;\n            const tilePropsDict = prev.tilePropsDict;\n\n            // if we previously attempted a match and failed, flip those tiles back over\n            if (lastClicked < 0) {\n                Object.values(tilePropsDict).forEach((p, i) => {\n                    if (!p.matched && p.flipped) {\n                        tilePropsDict[i].flipped = false;\n                    }\n                });\n            }\n\n            // flip current selection\n            tilePropsDict[tileIndex].flipped = true;\n\n            // check for match if we have 2 tiles flipped now\n            if (lastClicked > -1) {\n                const [first, second] = [tilePropsDict[lastClicked], tilePropsDict[tileIndex]];\n                if (first.icon === second.icon) {\n                    console.log('matched!');\n                    tilePropsDict[lastClicked].matched = true;\n                    tilePropsDict[tileIndex].matched = true;\n                    this.handleWinCondition(tilePropsDict);\n                }\n\n                // reset\n                lastClicked = -1;\n            } else {\n                // only one tile flipped, update\n                lastClicked = tileIndex;\n            }\n\n            // increment move count\n            this.props.incrementMoveCount();\n\n            return {\n                difficulty: prev.difficulty,\n                tilePropsDict,\n                lastClicked\n            };\n        });\n    }\n\n    render() {\n        const classes = `boardContainer ${Object.entries(this.difficulty).find(val => val[1] === this.state.difficulty)?.[0]}`;\n        return (\n            <div className={classes}>\n                {Object.values(this.state.tilePropsDict).map((p, i) => {\n                    return (\n                        <BoardTile key={i} {...p}></BoardTile>\n                    )\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\n\ninterface TimerState {\n    currTime: Date\n}\n\nexport class Timer extends React.Component<any, TimerState> {\n    private timerId!: NodeJS.Timeout;;\n    private startTime = new Date();\n    constructor(props: any) {\n        super(props);\n        this.startTime.setHours(0);\n        this.startTime.setMinutes(0);\n        this.startTime.setSeconds(0);\n        this.state = { currTime: this.startTime }\n    }\n\n    componentDidMount() {\n        this.timerId = setInterval(() => this.tick(), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerId);\n    }\n\n    tick() {\n        this.setState((prev) => ({\n            currTime: new Date(prev.currTime.valueOf() + 1000)\n        }));\n    }\n\n    getFormattedTime() {\n        const t = this.state.currTime;\n        const format = { minimumIntegerDigits: 2 };\n        const hours = t.getHours().toLocaleString('en-us', format);\n        const minutes = t.getMinutes().toLocaleString('en-us', format);\n        const seconds = t.getSeconds().toLocaleString('en-us', format);\n        return `${hours}:${minutes}:${seconds}`;\n    }\n\n    render() {\n        return (\n            <p>Timer: {this.getFormattedTime()}</p>\n        );\n    }\n}","import React from 'react';\n\ninterface MoveProps {\n    move: number;\n}\n\nexport class MoveCounter extends React.Component<MoveProps> {\n    render() {\n        return (\n            <p>Move Count: {this.props.move}</p>\n        );\n    }\n}","import { Container } from '@mui/material';\nimport { grey } from '@mui/material/colors';\nimport { SxProps } from '@mui/system';\nimport { Timer } from './Timer';\nimport { MoveCounter } from './MoveCounter';\n\ninterface GameStats {\n  moveCount: number;\n}\n\nfunction Stats(props: GameStats) {\n    const containerStyle: SxProps = {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        border: 2,\n        borderRadius: 3,\n        borderColor: 'primary.dark',\n        bgcolor: grey[900]\n    };\n\n    return (\n        <Container maxWidth=\"sm\" sx={containerStyle}>\n            <Timer></Timer>\n            <MoveCounter move={props.moveCount}></MoveCounter>\n        </Container>\n    );\n}\n\nexport default Stats;\n","import { ThemeProvider, createTheme, CssBaseline } from '@mui/material';\nimport { Container, Grid } from '@mui/material';\nimport { grey } from '@mui/material/colors';\nimport { SxProps } from '@mui/system';\nimport { StyledEngineProvider } from '@mui/material/styles';\n\nimport Board from './components/board/Board';\nimport Stats from './components/stats/Stats';\nimport { useState } from 'react';\n\n\nfunction App() {\n    const darkTheme = createTheme({\n        palette: {\n            mode: 'dark',\n        },\n    });\n\n    const gridStyle: SxProps = {\n        borderRadius: 3\n    };\n\n    const gridBoardItem: SxProps = {\n        border: 2,\n        borderRadius: 3,\n        bgcolor: grey[900],\n        borderColor: 'primary.dark'\n    };\n\n    const [moveCount, setMoveCount] = useState(0);\n    const incrementMoveCount = () => setMoveCount(moveCount + 1);\n\n    return (\n        <StyledEngineProvider injectFirst>\n            {/* injectFirst ensures that MUI styles are at the top of <head>\n                so we don't have to add !important to all of our other css rules */}\n            <ThemeProvider theme={darkTheme}>\n                <CssBaseline />\n                <Container maxWidth=\"lg\" sx={{ padding: '2em' }}>\n                    <Grid container sx={gridStyle} gap={4}>\n                        <Grid item xs={12}>\n                            <Stats moveCount={moveCount}></Stats>\n                        </Grid>\n                        <Grid item xs={12} sx={gridBoardItem}>\n                            <Board incrementMoveCount={incrementMoveCount}></Board>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </ThemeProvider>\n        </StyledEngineProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}